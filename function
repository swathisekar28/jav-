select*from holder;
create or replace function details(
    p_holderid number)
    return varchar2
    is
    v_name varchar(100);
    v_address varchar(200);
    begin 
    select name,address into v_name,v_address from holder where holder_id=p_holderid;
    return 'name:'||v_name||'address:'||v_address;
    end;
    declare 
    v_details varchar(255);
    begin 
    v_details:=details(1);
    DBMS_OUTPUT.PUT_LINE(v_details);
    end;
select*from holder;
create or replace function details(
    p_holderid number)
    return varchar2
    is
    v_name varchar(100);
    v_address varchar(200);
    begin 
    select name,address into v_name,v_address from holder where holder_id=p_holderid;
    return 'name:'||v_name||'address:'||v_address;
    end;
    declare 
    v_details varchar(255);
    begin 
    v_details:=details(1);
    DBMS_OUTPUT.PUT_LINE(v_details);
    end;
    CREATE TABLE student_details (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL
);
-- Insert data into the student table
INSERT INTO student_details (student_id, name) VALUES (1, 'Alice');
INSERT INTO student_details  (student_id, name) VALUES (2, 'Bob');
INSERT INTO student_details  (student_id, name) VALUES (3, 'Charlie');

-- Insert data into the mark table
INSERT INTO mark (mark_id, student_id, mathematics, science, english) VALUES (1, 1, 85, 90, 88);
INSERT INTO mark (mark_id, student_id, mathematics, science, english) VALUES (2, 2, 78, 83, 77);
INSERT INTO mark (mark_id, student_id, mathematics, science, english) VALUES (3, 3, 92, 95, 91);
INSERT INTO mark (mark_id, student_id, mathematics, science, english) VALUES (4, 4, 80, 85, 82);
INSERT INTO mark (mark_id, student_id, mathematics, science, english) VALUES (5, 5, 70, 75, 72);

CREATE TABLE mark (
    mark_id NUMBER PRIMARY KEY,
    student_id NUMBER NOT NULL,
    mathematics NUMBER NOT NULL,
    science NUMBER NOT NULL,
    english NUMBER NOT NULL,
    FOREIGN KEY (student_id) REFERENCES student_details(student_id)
);
CREATE OR REPLACE FUNCTION get_total_marks (
    p_student_id IN NUMBER
) RETURN NUMBER
IS
    v_total_marks NUMBER;
BEGIN
    SELECT mathematics + science + english
    INTO v_total_marks
    FROM mark
    WHERE student_id = p_student_id;

    RETURN v_total_marks;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN -1; -- Indicating an error occurred
END get_total_marks;
/
CREATE OR REPLACE FUNCTION get_highest_marks (
    p_student_id IN NUMBER
) RETURN NUMBER
IS
    v_highest_marks NUMBER;
BEGIN
    SELECT GREATEST(mathematics, science, english)
    INTO v_highest_marks
    FROM mark
    WHERE student_id = p_student_id;

    RETURN v_highest_marks;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    WHEN OTHERS THEN
        RETURN -1; -- Indicating an error occurred
END get_highest_marks;
/
DECLARE
    v_highest_marks NUMBER;
BEGIN
    v_highest_marks := get_highest_marks(1);
    DBMS_OUTPUT.PUT_LINE('Highest Marks: ' || v_highest_marks);
END;
/

